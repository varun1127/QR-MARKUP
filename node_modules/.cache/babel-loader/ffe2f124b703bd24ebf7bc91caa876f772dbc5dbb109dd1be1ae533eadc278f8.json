{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\VARUN\\\\OneDrive\\\\Desktop\\\\QR MARKUP\\\\src\\\\components\\\\auth\\\\AuthGuard.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Navigate, Outlet } from 'react-router-dom';\nimport LoadingSpinner from '../common/LoadingSpinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthGuard = () => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = React.useState(null);\n  const [userRole, setUserRole] = React.useState(null);\n  React.useEffect(() => {\n    const checkAuth = () => {\n      const token = localStorage.getItem('token');\n      const role = localStorage.getItem('role');\n      // In a real app, you would verify the token with your backend\n      setIsAuthenticated(!!token);\n      setUserRole(role);\n    };\n    checkAuth();\n  }, []);\n  if (isAuthenticated === null) {\n    return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }, this);\n  }\n  if (!isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Outlet, {\n    context: {\n      userRole\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 10\n  }, this);\n};\n_s(AuthGuard, \"qfFhS+B9oPZBpPP9rFZUMV//UKY=\");\n_c = AuthGuard;\nexport default AuthGuard;\nvar _c;\n$RefreshReg$(_c, \"AuthGuard\");","map":{"version":3,"names":["React","Navigate","Outlet","LoadingSpinner","jsxDEV","_jsxDEV","AuthGuard","_s","isAuthenticated","setIsAuthenticated","useState","userRole","setUserRole","useEffect","checkAuth","token","localStorage","getItem","role","fileName","_jsxFileName","lineNumber","columnNumber","to","replace","context","_c","$RefreshReg$"],"sources":["C:/Users/VARUN/OneDrive/Desktop/QR MARKUP/src/components/auth/AuthGuard.jsx"],"sourcesContent":["import React from 'react';\r\nimport { Navigate, Outlet } from 'react-router-dom';\r\nimport LoadingSpinner from '../common/LoadingSpinner';\r\n\r\nconst AuthGuard = () => {\r\n  const [isAuthenticated, setIsAuthenticated] = React.useState(null);\r\n  const [userRole, setUserRole] = React.useState(null);\r\n\r\n  React.useEffect(() => {\r\n    const checkAuth = () => {\r\n      const token = localStorage.getItem('token');\r\n      const role = localStorage.getItem('role');\r\n      // In a real app, you would verify the token with your backend\r\n      setIsAuthenticated(!!token);\r\n      setUserRole(role);\r\n    };\r\n\r\n    checkAuth();\r\n  }, []);\r\n\r\n  if (isAuthenticated === null) {\r\n    return <LoadingSpinner />;\r\n  }\r\n\r\n  if (!isAuthenticated) {\r\n    return <Navigate to=\"/login\" replace />;\r\n  }\r\n\r\n  return <Outlet context={{ userRole }} />;\r\n};\r\n\r\nexport default AuthGuard;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,MAAM,QAAQ,kBAAkB;AACnD,OAAOC,cAAc,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,KAAK,CAACU,QAAQ,CAAC,IAAI,CAAC;EAClE,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,KAAK,CAACU,QAAQ,CAAC,IAAI,CAAC;EAEpDV,KAAK,CAACa,SAAS,CAAC,MAAM;IACpB,MAAMC,SAAS,GAAGA,CAAA,KAAM;MACtB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMC,IAAI,GAAGF,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;MACzC;MACAR,kBAAkB,CAAC,CAAC,CAACM,KAAK,CAAC;MAC3BH,WAAW,CAACM,IAAI,CAAC;IACnB,CAAC;IAEDJ,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIN,eAAe,KAAK,IAAI,EAAE;IAC5B,oBAAOH,OAAA,CAACF,cAAc;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC3B;EAEA,IAAI,CAACd,eAAe,EAAE;IACpB,oBAAOH,OAAA,CAACJ,QAAQ;MAACsB,EAAE,EAAC,QAAQ;MAACC,OAAO;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACzC;EAEA,oBAAOjB,OAAA,CAACH,MAAM;IAACuB,OAAO,EAAE;MAAEd;IAAS;EAAE;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC1C,CAAC;AAACf,EAAA,CAzBID,SAAS;AAAAoB,EAAA,GAATpB,SAAS;AA2Bf,eAAeA,SAAS;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}